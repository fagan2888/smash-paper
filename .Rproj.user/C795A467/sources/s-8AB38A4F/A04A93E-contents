---
title: "ChIP-seq example"
author: "Zhengrong Xing, Peter Carbonetto and Matthew Stephens"
output: workflowr::wflow_html
---

This is an illustration of "SMoothing by Adaptive SHrinkage" (SMASH)
applied to chromatin immunoprecipitation sequencing ("ChIP-seq")
data. This implements the SMASH analysis presented in Sec. 5.2 of the
manuscript.

```{r knitr-opts, include=FALSE}
knitr::opts_chunk$set(comment = "#",collapse = TRUE,fig.align = "center")
```

Initial setup instructions
--------------------------

To run this example on your own computer, please follow these setup
instructions. These instructions assume you already have R (optionally,
RStudio) installed on your computer.

Download or clone the [git repository][smash-github] on your computer.

Launch R, and change the working directory to be the "analysis" folder
inside your local copy of the git repository.

Install the devtools, ggplot2 and cowplot packages used here and in
the code below:

```{r install-pkgs-1, eval=FALSE}
install.packages(c("devtools","ggplot2","cowplot"))
```

Finally, install the smashr package from GitHub:

```{r install-pkgs-2, eval=FALSE}
devtools::install_github("stephenslab/smashr")
```

See the "Session Info" at the bottom for the versions of the software
and R packages that were used to generate the results shown below.

Set up R environment
--------------------

Loading the smashr, ggplot2 and cowplot packages, as well as some
additional functions used to implement the analysis below.

```{r load-pkgs, warning=FALSE, message=FALSE}
source("../code/chipseq.functions.R")
library(smashr)
library(ggplot2)
library(cowplot)
library(haarfisz)
```

Load the ChIP-seq data
----------------------

The ChIP-seq data are sequencing read counts for transcription factor
YY1 in cell line GM12878, restricted to 880,001--1,011,072 bp on
chromosome 1. These data were collected as part of the ENCODE
("Encyclopedia Of DNA Elements") project. The data are included with
the [git repository][smash-github].

```{r load-data}
load("../data/reg_880000_1011072.RData")
bppos  <- 880001:1011072
counts <- M[1,] + M[,2]
```

Note that there are two replicates of the GM12878 cell line, so we
analyze the combined read counts from both replicates, stored in the
`counts` vectors.

Run SMASH
---------

Next, we apply SMASH to the read counts to estimate the mean and
variance of the underlying signal. It may take several minutes to
complete this step.

```{r run-smash}
hf.la10.ti4=function (x, filter.number = 10, family = "DaubLeAsymm", min.level = 4, noise.level = 1) 
{
    TT <- length(x)
    thresh <- noise.level * sqrt(2 * log(TT))
    x.w <- wd(x, filter.number, family, type = "station")
    x.w.t <- threshold(x.w, levels = (min.level):(x.w$nlevels - 1), policy = "manual", value = thresh, type = "hard")
    x.w.t.r <- AvBasis(convert(x.w.t))
    return(x.w.t.r)
}

res <- smash.poiss(counts,post.var = TRUE)
res.hf <- denoise.poisson(counts, meth.1=hf.la10.ti4, cs.1=50, hybrid=F)
```

Plot the SMASH estimates
------------------------

To provide a "baseline" to compare against the SMASH estimates, we
retrieve the peaks identified in the same ChIP-seq data using the MACS
software. Again, these data should have been included with the git
repository you downloaded.

```{r load-macs-peaks}
macs.file <- "../data/Gm1287peaks_chr1_sorted.txt"
peaks <- read.macs.peaks(macs.file,min(bppos),max(bppos))
```

This next plot shows the intensity function estimated by SMASH (orange
line). The read count data are depicted as light blue circles, in
which the area of each circle is scaled by the number of data points
that fall within each 1.6-kb "bin". (We show counts summarized within
bins because there are too many data points to plot them
individually.)

The peaks identified by the MACS software are shown as red
triangles. (Specifically, these are the *mean positions* of the
identified peak intervals; the peak intervals are short enough that it
is not useful to show both the start and end positions of these
intervals.)

```{r plot-smash-estimates, fig.height=3, fig.width=9}
create.chipseq.plot(bppos/1e6,counts,res$est,(peaks$start + peaks$end)/2e6,
                    nbreaks = 80) +
  scale_x_continuous(limits = c(0.88,1.02),breaks = seq(0.88,1.02,0.02)) +
  scale_y_continuous(limits = c(-1,9),breaks = seq(0,8,2))
```

Based on this plot, it is clear that the the strongest SMASH intensity
estimates align very closely with the peaks found by MACS. Intriguingly,
the SMASH estimates also suggest the presence of several additional
weaker peaks that were not identified by MACS.

We compare the results against those produced by Haar-Fisz
```{r plot-smash-estimates, fig.height=3, fig.width=9}
create.chipseq.plot(bppos/1e6,counts,res.hf,(peaks$start + peaks$end)/2e6,
                    nbreaks = 80) +
  scale_x_continuous(limits = c(0.88,1.02),breaks = seq(0.88,1.02,0.02)) +
  scale_y_continuous(limits = c(-1,9),breaks = seq(0,8,2))
```

[smash-github]: https://github.com/stephenslab/smash-paper
