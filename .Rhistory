par(mar=c(10,4,4,2))
barplot(mise_ordered, names.arg = names_ordered, las = 2)
title(scenario)
}
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
par(mar=c(10,4,4,2))
bp = barplot(mise_ordered, names.arg = names_ordered, las = 2)
text(x = bp, y = mise_ordered, label = dat$freqs, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
par(mar=c(10,4,4,2))
bp = barplot(mise_ordered, names.arg = names_ordered, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
?round
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(10,4,4,2))
bp = barplot(mise_ordered, names.arg = names_ordered, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(10,4,4,2))
ylim = c(0, 1.1 * max(mise_ordered))
bp = barplot(mise_ordered, names.arg = names_ordered, ylim = ylim, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(10,4,4,2))
ylim = c(0, 1.2 * max(mise_ordered))
bp = barplot(mise_ordered, names.arg = names_ordered, ylim = ylim, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
scenarios = unique(res_agg$scenario)[1]
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(9,4,4,2))
ylim = c(0, 1.2 * max(mise_ordered))
bp = barplot(mise_ordered, names.arg = names_ordered, ylim = ylim, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
scenarios = unique(res_agg$scenario)
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(9,4,4,2))
ylim = c(0, 1.2 * max(mise_ordered))
bp = barplot(mise_ordered, names.arg = names_ordered, ylim = ylim, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
packageVersion("smashr")
ebayesthresh.wrapper
t = (1:1024)/1024
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma=sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma=sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma=sd.true, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(x.sim, sig.est=sd.est, family = "DaubLeAsymm", filter.number = 8)
library(AlgDesign)
library(smashr)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
t = (1:1024)/1024
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma=sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma=sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma=sd.true, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(x.sim, sig.est=sd.est, family = "DaubLeAsymm", filter.number = 8)
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.ti,col = "dodgerblue",lwd = 3)
lines(mu.smash,col = "orangered",lwd = 3)
legend(650, 1.05, c("ground-truth signal", "TI-thresholding (RMAD)", "SMASH"), col = c("black", "dodgerblue", "orangered"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.75)
}
library(AlgDesign)
library(smashr)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma=sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma=sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma=sd.true, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(x.sim, sig.est=sd.est, family = "DaubLeAsymm", filter.number = 8)
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.ti,col = "dodgerblue",lwd = 3)
lines(mu.smash,col = "orangered",lwd = 3)
legend(650, 1.05, c("ground-truth signal", "TI-thresholding (RMAD)", "SMASH"), col = c("black", "dodgerblue", "orangered"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.75)
}
mu.ti.true = ti.thresh(x.sim, sigma=sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(x.sim, sig.est=sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x=x.sim, sig.est=sd.est), list(family = "DaubLeAsymm", filter.number = 8))
library(EbayesThresh)
library(wavethresh)
mu.ebayes = ebayesthresh.wrapper(list(x=x.sim, sig.est=sd.est), list(family = "DaubLeAsymm", filter.number = 8))
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma=sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma=sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma=sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x=x.sim, sig.est=sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.ti,col = "dodgerblue",lwd = 3)
lines(mu.smash,col = "orangered",lwd = 3)
legend(650, 1.05, c("ground-truth signal", "TI-thresholding (RMAD)", "SMASH"), col = c("black", "dodgerblue", "orangered"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.75)
}
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma = sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma = sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma = sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x = x.sim, sig.est = sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.smash.true, col = "orangered", lwd = 3)
lines(mu.smash.default, col = "red", lwd = 3)
lines(mu.smash.homo, col = "pink", lwd = 3)
lines(mu.ti.true, col = "dodgerblue", lwd = 3)
lines(mu.ti.smash, col = "green", lwd = 3)
lines(mu.ti.rmad, col = "darkyellow", lwd = 3)
lines(mu.ebayes, col = "brown", lwd = 3)
legend(650, 1.05, c("ground-truth signal", "SMASH (true variance)", "SMASH (default; estimated variance)", "SMASH (homoskedastic variance)", "TI-thresholding (true variance)", "TI-thresholding (SMASH-estimated variance)", "TI-thresholding (RMAD)", "Ebayesthresh"), col = c("black", "dodgerblue", "orangered"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.75)
}
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma = sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma = sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma = sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x = x.sim, sig.est = sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.smash.true, col = "orangered", lwd = 3)
lines(mu.smash.default, col = "red", lwd = 3)
lines(mu.smash.homo, col = "pink", lwd = 3)
lines(mu.ti.true, col = "dodgerblue", lwd = 3)
lines(mu.ti.smash, col = "green", lwd = 3)
lines(mu.ti.rmad, col = "purple", lwd = 3)
lines(mu.ebayes, col = "brown", lwd = 3)
legend(650, 1.05, c("ground-truth signal", "SMASH (true variance)", "SMASH (default; estimated variance)", "SMASH (homoskedastic variance)", "TI-thresholding (true variance)", "TI-thresholding (SMASH-estimated variance)", "TI-thresholding (RMAD)", "Ebayesthresh"), col = c("black", "orangered", "red", "pink", "dodgerblue", "green", "purple", "brown"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.75)
}
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma = sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma = sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma = sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x = x.sim, sig.est = sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 3,xlab = "position",ylab = "",
ylim = c(-0.05,1.2),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.smash.true, col = "orangered", lwd = 1)
lines(mu.smash.default, col = "red", lwd = 1)
lines(mu.smash.homo, col = "pink", lwd = 1)
lines(mu.ti.true, col = "dodgerblue", lwd = 1)
lines(mu.ti.smash, col = "green", lwd = 1)
lines(mu.ti.rmad, col = "purple", lwd = 1)
lines(mu.ebayes, col = "brown", lwd = 1)
legend(550, 1.25, c("ground-truth signal", "SMASH (true variance)", "SMASH (default; estimated variance)", "SMASH (homoskedastic variance)", "TI-thresholding (true variance)", "TI-thresholding (SMASH-estimated variance)", "TI-thresholding (RMAD)", "Ebayesthresh"), col = c("black", "orangered", "red", "pink", "dodgerblue", "green", "purple", "brown"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.7)
}
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:1) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma = sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma = sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma = sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x = x.sim, sig.est = sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 2,xlab = "position",ylab = "",
ylim = c(-0.05,1.5),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.smash.true, col = "orangered", lwd = 1.5)
lines(mu.smash.default, col = "red", lwd = 1.5)
lines(mu.smash.homo, col = "pink", lwd = 1.5)
lines(mu.ti.true, col = "dodgerblue", lwd = 1.5)
lines(mu.ti.smash, col = "green", lwd = 1.5)
lines(mu.ti.rmad, col = "purple", lwd = 1.5)
lines(mu.ebayes, col = "brown", lwd = 1.5)
legend(450, 1.5, c("ground-truth signal", "SMASH (true variance)", "SMASH (default; estimated variance)", "SMASH (homoskedastic variance)", "TI-thresholding (true variance)", "TI-thresholding (SMASH-estimated variance)", "TI-thresholding (RMAD)", "Ebayesthresh"), col = c("black", "orangered", "red", "pink", "dodgerblue", "green", "purple", "brown"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.7)
}
library(AlgDesign)
library(smashr)
library(EbayesThresh)
library(wavethresh)
source("../code/signals.R")
# today's date
set.seed(191027)
meanfn = c(spikes.fn, bumps.fn, blocks.fn, angles.fn, doppler.fn, blip.fn, cor.fn)
meanfn.short = c("sp", "bump", "blk", "ang", "dop", "blip", "cor")
rsnr = sqrt(c(1, 3))
varfn = c(cons.fn, texp.fn, doppler.fn, cblocks.fn)
varfn.short = c("cons", "texp", "dop", "cblk")
design = gen.factorial(c(length(varfn), length(rsnr), length(meanfn)), center = FALSE)
for (i in 1:dim(design)[1]) {
name = paste(meanfn.short[design[i, 3]], rsnr[design[i, 2]]^2, varfn.short[design[i, 1]], sep = ".")
args = list(n = 1024, rsnr = rsnr[design[i, 2]], meanfn = meanfn[[design[i, 3]]], varfn = varfn[[design[i, 1]]])
n = 1024
t = (1:n)/n
mu = args$meanfn(t, "mean")
sigma = sqrt(args$varfn(t, "var"))
sd = sigma/mean(sigma) * sd(mu)/rsnr^2
x.sim = rnorm(args$n, mu, sd)
sd.est = sqrt(2/(3 * (n - 2)) *
sum((1/2 * x.sim[1:(n - 2)] -
x.sim[2:(n - 1)] +
1/2 * x.sim[3:n])^2))
mu.smash.default = smash(x.sim, family = "DaubLeAsymm", filter.number = 8)
mu.smash.true = smash(x.sim, sigma = sd, family = "DaubLeAsymm", filter.number = 8)
mu.smash.homo = smash(x.sim, sigma = sd.est, family = "DaubLeAsymm", filter.number = 8)
mu.ti.rmad = ti.thresh(x.sim, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.smash = ti.thresh(x.sim, method = "smash", family = "DaubLeAsymm",
filter.number = 8)
mu.ti.true = ti.thresh(x.sim, sigma = sd, method = "rmad", family = "DaubLeAsymm",
filter.number = 8)
mu.ebayes = ebayesthresh.wrapper(list(x = x.sim, sig.est = sd.est), list(family = "DaubLeAsymm", filter.number = 8))
title = paste("mean: ", meanfn.short[design[i, 3]], ", var: ", varfn.short[design[i, 1]], ", snr: ", rsnr[design[i, 2]]^2, sep = "")
par(cex.axis = 1)
plot(mu,type = "l",col = "black",lwd = 2,xlab = "position",ylab = "",
ylim = c(-0.05,1.5),xaxp = c(0,1024,4),yaxp = c(0,1,4), main = title)
lines(mu.smash.true, col = "orangered", lwd = 1.5)
lines(mu.smash.default, col = "red", lwd = 1.5)
lines(mu.smash.homo, col = "pink", lwd = 1.5)
lines(mu.ti.true, col = "dodgerblue", lwd = 1.5)
lines(mu.ti.smash, col = "green", lwd = 1.5)
lines(mu.ti.rmad, col = "purple", lwd = 1.5)
lines(mu.ebayes, col = "brown", lwd = 1.5)
legend(450, 1.55, c("ground-truth signal", "SMASH (true variance)", "SMASH (default; estimated variance)", "SMASH (homoskedastic variance)", "TI-thresholding (true variance)", "TI-thresholding (SMASH-estimated variance)", "TI-thresholding (RMAD)", "Ebayesthresh"), col = c("black", "orangered", "red", "pink", "dodgerblue", "green", "purple", "brown"), bty = "n", lwd = 1, pt.cex = 1, cex = 0.7)
}
load("../output/dscr.RData")
res_agg = aggregate(mise ~ scenario + method, data = res, FUN = mean)
scenarios = unique(res_agg$scenario)
scenarios
res_agg
selected_methods = c("smash.true.s8", "smash.s8", "smash.homo.s8", "tithresh.true.s8", "tithresh.smash.s8", "tithresh.rmad.s8", "ebayesthresh")
res_agg = res_agg[res_agg$method %in% selected_methods]
res_agg = res_agg[, res_agg$method %in% selected_methods]
res_agg = res_agg[which(res_agg$method %in% selected_methods)]
res_agg$method %in% selected_methods
res_agg[, res_agg$method %in% selected_methods]
res_agg[res_agg$method %in% selected_methods, ]
load("../output/dscr.RData")
res_agg = aggregate(mise ~ scenario + method, data = res, FUN = mean)
selected_methods = c("smash.true.s8", "smash.s8", "smash.homo.s8", "tithresh.true.s8", "tithresh.smash.s8", "tithresh.rmad.s8", "ebayesthresh")
res_agg = res_agg[res_agg$method %in% selected_methods, ]
scenarios = unique(res_agg$scenario)
for (scenario in scenarios) {
mise_order = order(res_agg$mise[res_agg$scenario == scenario])
mise_ordered = sort(res_agg$mise[res_agg$scenario == scenario])
names_ordered = res_agg$method[res_agg$scenario == scenario][mise_order]
mise_ordered_rounded = round(mise_ordered, digits = 0)
par(mar=c(9,4,4,2))
ylim = c(0, 1.2 * max(mise_ordered))
bp = barplot(mise_ordered, names.arg = names_ordered, ylim = ylim, las = 2)
text(x = bp, y = mise_ordered, label = mise_ordered_rounded, pos = 3, cex = 0.8, col = "red")
title(scenario)
}
